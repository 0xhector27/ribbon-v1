// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Exercised extends ethereum.Event {
  get params(): Exercised__Params {
    return new Exercised__Params(this);
  }
}

export class Exercised__Params {
  _event: Exercised;

  constructor(event: Exercised) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get positionID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get totalProfit(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get optionsExercised(): Array<boolean> {
    return this._event.parameters[3].value.toBooleanArray();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PositionCreated extends ethereum.Event {
  get params(): PositionCreated__Params {
    return new PositionCreated__Params(this);
  }
}

export class PositionCreated__Params {
  _event: PositionCreated;

  constructor(event: PositionCreated) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get positionID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get venues(): Array<string> {
    return this._event.parameters[2].value.toStringArray();
  }

  get optionTypes(): Array<i32> {
    return this._event.parameters[3].value.toI32Array();
  }

  get amounts(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }

  get optionIDs(): Array<BigInt> {
    return this._event.parameters[5].value.toBigIntArray();
  }
}

export class Purchased extends ethereum.Event {
  get params(): Purchased__Params {
    return new Purchased__Params(this);
  }
}

export class Purchased__Params {
  _event: Purchased;

  constructor(event: Purchased) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get protocolName(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get underlying(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get strikeAsset(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get expiry(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get strikePrice(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get optionType(): i32 {
    return this._event.parameters[6].value.toI32();
  }

  get amount(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get premium(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get optionID(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }
}

export class Exercised1 extends ethereum.Event {
  get params(): Exercised1__Params {
    return new Exercised1__Params(this);
  }
}

export class Exercised1__Params {
  _event: Exercised1;

  constructor(event: Exercised1) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get options(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get optionID(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get exerciseProfit(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Instrument__getInstrumentPositionsResultPositionsStruct extends ethereum.Tuple {
  get exercised(): boolean {
    return this[0].toBoolean();
  }

  get optionTypes(): Array<i32> {
    return this[1].toI32Array();
  }

  get optionIDs(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get strikePrices(): Array<BigInt> {
    return this[4].toBigIntArray();
  }

  get venues(): Array<string> {
    return this[5].toStringArray();
  }
}

export class Instrument__instrumentPositionResultPositionStruct extends ethereum.Tuple {
  get exercised(): boolean {
    return this[0].toBoolean();
  }

  get optionTypes(): Array<i32> {
    return this[1].toI32Array();
  }

  get optionIDs(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get strikePrices(): Array<BigInt> {
    return this[4].toBigIntArray();
  }

  get venues(): Array<string> {
    return this[5].toStringArray();
  }
}

export class Instrument extends ethereum.SmartContract {
  static bind(address: Address): Instrument {
    return new Instrument("Instrument", address);
  }

  canExercise(account: Address, positionID: BigInt): boolean {
    let result = super.call(
      "canExercise",
      "canExercise(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(positionID)
      ]
    );

    return result[0].toBoolean();
  }

  try_canExercise(
    account: Address,
    positionID: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canExercise",
      "canExercise(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(positionID)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  collateralAsset(): Address {
    let result = super.call(
      "collateralAsset",
      "collateralAsset():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_collateralAsset(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "collateralAsset",
      "collateralAsset():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  cost(
    venues: Array<string>,
    optionTypes: Array<i32>,
    amounts: Array<BigInt>,
    strikePrices: Array<BigInt>
  ): BigInt {
    let result = super.call(
      "cost",
      "cost(string[],uint8[],uint256[],uint256[]):(uint256)",
      [
        ethereum.Value.fromStringArray(venues),
        ethereum.Value.fromI32Array(optionTypes),
        ethereum.Value.fromUnsignedBigIntArray(amounts),
        ethereum.Value.fromUnsignedBigIntArray(strikePrices)
      ]
    );

    return result[0].toBigInt();
  }

  try_cost(
    venues: Array<string>,
    optionTypes: Array<i32>,
    amounts: Array<BigInt>,
    strikePrices: Array<BigInt>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "cost",
      "cost(string[],uint8[],uint256[],uint256[]):(uint256)",
      [
        ethereum.Value.fromStringArray(venues),
        ethereum.Value.fromI32Array(optionTypes),
        ethereum.Value.fromUnsignedBigIntArray(amounts),
        ethereum.Value.fromUnsignedBigIntArray(strikePrices)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dToken(): Address {
    let result = super.call("dToken", "dToken():(address)", []);

    return result[0].toAddress();
  }

  try_dToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("dToken", "dToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  exercisePosition(positionID: BigInt): BigInt {
    let result = super.call(
      "exercisePosition",
      "exercisePosition(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(positionID)]
    );

    return result[0].toBigInt();
  }

  try_exercisePosition(positionID: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "exercisePosition",
      "exercisePosition(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(positionID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  exerciseProfit(account: Address, positionID: BigInt): BigInt {
    let result = super.call(
      "exerciseProfit",
      "exerciseProfit(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(positionID)
      ]
    );

    return result[0].toBigInt();
  }

  try_exerciseProfit(
    account: Address,
    positionID: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "exerciseProfit",
      "exerciseProfit(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(positionID)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  expiry(): BigInt {
    let result = super.call("expiry", "expiry():(uint256)", []);

    return result[0].toBigInt();
  }

  try_expiry(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("expiry", "expiry():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getInstrumentPositions(
    account: Address
  ): Array<Instrument__getInstrumentPositionsResultPositionsStruct> {
    let result = super.call(
      "getInstrumentPositions",
      "getInstrumentPositions(address):((bool,uint8[],uint32[],uint256[],uint256[],string[])[])",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toTupleArray<
      Instrument__getInstrumentPositionsResultPositionsStruct
    >();
  }

  try_getInstrumentPositions(
    account: Address
  ): ethereum.CallResult<
    Array<Instrument__getInstrumentPositionsResultPositionsStruct>
  > {
    let result = super.tryCall(
      "getInstrumentPositions",
      "getInstrumentPositions(address):((bool,uint8[],uint32[],uint256[],uint256[],string[])[])",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        Instrument__getInstrumentPositionsResultPositionsStruct
      >()
    );
  }

  instrumentPosition(
    account: Address,
    positionID: BigInt
  ): Instrument__instrumentPositionResultPositionStruct {
    let result = super.call(
      "instrumentPosition",
      "instrumentPosition(address,uint256):((bool,uint8[],uint32[],uint256[],uint256[],string[]))",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(positionID)
      ]
    );

    return result[0].toTuple() as Instrument__instrumentPositionResultPositionStruct;
  }

  try_instrumentPosition(
    account: Address,
    positionID: BigInt
  ): ethereum.CallResult<Instrument__instrumentPositionResultPositionStruct> {
    let result = super.tryCall(
      "instrumentPosition",
      "instrumentPosition(address,uint256):((bool,uint8[],uint32[],uint256[],uint256[],string[]))",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(positionID)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as Instrument__instrumentPositionResultPositionStruct
    );
  }

  instrumentPositions(param0: Address, param1: BigInt): boolean {
    let result = super.call(
      "instrumentPositions",
      "instrumentPositions(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBoolean();
  }

  try_instrumentPositions(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "instrumentPositions",
      "instrumentPositions(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  numOfPositions(_account: Address): BigInt {
    let result = super.call(
      "numOfPositions",
      "numOfPositions(address):(uint256)",
      [ethereum.Value.fromAddress(_account)]
    );

    return result[0].toBigInt();
  }

  try_numOfPositions(_account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numOfPositions",
      "numOfPositions(address):(uint256)",
      [ethereum.Value.fromAddress(_account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  strikeAsset(): Address {
    let result = super.call("strikeAsset", "strikeAsset():(address)", []);

    return result[0].toAddress();
  }

  try_strikeAsset(): ethereum.CallResult<Address> {
    let result = super.tryCall("strikeAsset", "strikeAsset():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  underlying(): Address {
    let result = super.call("underlying", "underlying():(address)", []);

    return result[0].toAddress();
  }

  try_underlying(): ethereum.CallResult<Address> {
    let result = super.tryCall("underlying", "underlying():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class BuyInstrumentCall extends ethereum.Call {
  get inputs(): BuyInstrumentCall__Inputs {
    return new BuyInstrumentCall__Inputs(this);
  }

  get outputs(): BuyInstrumentCall__Outputs {
    return new BuyInstrumentCall__Outputs(this);
  }
}

export class BuyInstrumentCall__Inputs {
  _call: BuyInstrumentCall;

  constructor(call: BuyInstrumentCall) {
    this._call = call;
  }

  get venues(): Array<string> {
    return this._call.inputValues[0].value.toStringArray();
  }

  get optionTypes(): Array<i32> {
    return this._call.inputValues[1].value.toI32Array();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get strikePrices(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get buyData(): Array<Bytes> {
    return this._call.inputValues[4].value.toBytesArray();
  }
}

export class BuyInstrumentCall__Outputs {
  _call: BuyInstrumentCall;

  constructor(call: BuyInstrumentCall) {
    this._call = call;
  }

  get positionID(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ExercisePositionCall extends ethereum.Call {
  get inputs(): ExercisePositionCall__Inputs {
    return new ExercisePositionCall__Inputs(this);
  }

  get outputs(): ExercisePositionCall__Outputs {
    return new ExercisePositionCall__Outputs(this);
  }
}

export class ExercisePositionCall__Inputs {
  _call: ExercisePositionCall;

  constructor(call: ExercisePositionCall) {
    this._call = call;
  }

  get positionID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ExercisePositionCall__Outputs {
  _call: ExercisePositionCall;

  constructor(call: ExercisePositionCall) {
    this._call = call;
  }

  get totalProfit(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _factory(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _name(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[3].value.toString();
  }

  get _underlying(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _strikeAsset(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _collateralAsset(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get _expiry(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class Initialize1Call extends ethereum.Call {
  get inputs(): Initialize1Call__Inputs {
    return new Initialize1Call__Inputs(this);
  }

  get outputs(): Initialize1Call__Outputs {
    return new Initialize1Call__Outputs(this);
  }
}

export class Initialize1Call__Inputs {
  _call: Initialize1Call;

  constructor(call: Initialize1Call) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class Initialize1Call__Outputs {
  _call: Initialize1Call;

  constructor(call: Initialize1Call) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
